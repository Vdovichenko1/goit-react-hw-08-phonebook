{"version":3,"file":"static/js/86.fd1eeb15.chunk.js","mappings":"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","sources":["components/Navigator/Navigator.js","components/UserMenu/UserMenu.js","redux/auth/use/useAuth.js","components/AppBar/AppBar.jsx","redux/auth/pages/Layout.jsx","../node_modules/@chakra-ui/button/dist/index.esm.js","../node_modules/@chakra-ui/react-use-merge-refs/dist/index.esm.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { Button } from '@chakra-ui/react';\n\nexport default function Navigator() {\n  return (\n    <div>\n      <NavLink to=\"/register\">\n        <Button colorScheme=\"teal\" variant=\"outline\" marginRight=\"10px\">\n          Register\n        </Button>\n      </NavLink>\n      <NavLink to=\"/login\">\n        <Button colorScheme=\"teal\" variant=\"outline\" marginRight=\"10px\">\n          Log In\n        </Button>\n      </NavLink>\n    </div>\n  );\n}\n","import { Box, Button, Text } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { logOutUser } from 'redux/auth/authOperations';\nimport { useAuth } from 'redux/auth/use/useAuth';\n\nexport default function UserMenu() {\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n\n  return (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      textAlign=\"center\"\n      marginRight=\"20px\"\n    >\n      <Text fontSize=\"16px\" fontWeight=\"500\" color=\"purple\" marginRight=\"10px\">\n        Welcome, {user.name}\n      </Text>\n      <Button\n        colorScheme=\"purple\"\n        type=\"button\"\n        onClick={() => dispatch(logOutUser())}\n      >\n        Logout\n      </Button>\n    </Box>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { selectLogIn, selectToken, selectUsername } from '../authSelectors';\n\nexport const useAuth = () => {\n  const isLoggedIn = useSelector(selectLogIn);\n  const user = useSelector(selectUsername);\n  const token = useSelector(selectToken);\n\n  return {\n    isLoggedIn,\n    user,\n    token,\n  };\n};\n","import { Box, Text } from '@chakra-ui/react';\nimport Navigator from 'components/Navigator';\nimport UserMenu from 'components/UserMenu';\nimport { useSelector } from 'react-redux';\nimport { selectLogIn } from 'redux/auth/authSelectors';\n\nexport default function AppBar() {\n  const logIn = useSelector(selectLogIn);\n  return (\n    <Box display = \" flex \" alignItems = \" center \" justifyContent = \" space-between \" marginBottom='50px' marginTop='30px' borderBottom='2px solid green' paddingBottom='7px'>\n      <Text fontSize='22px' fontWeight='700' color='green' marginLeft='10px'> Phonebook </Text>\n      {logIn ? <UserMenu /> : <Navigator />}\n    </Box>\n  );\n}","import { Box } from '@chakra-ui/react';\nimport AppBar from 'components/AppBar';\nimport { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { PacmanLoader } from 'react-spinners';\n\nexport default function Layout() {\n  return (\n    <Box >\n      <AppBar />\n      <Suspense fallback={<PacmanLoader color=\"#36d7b7\"  cssOverride={{display: 'block', marginLeft: 'auto', marginRight: 'auto'}}/>}>\n        <Outlet />\n      </Suspense>\n    </Box>\n  );\n}\n","// ../../../react-shim.js\nimport React from \"react\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport {\n  chakra as chakra3,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\nvar dataAttr = (condition) => condition ? \"\" : void 0;\n\n// src/button.tsx\nimport { useMemo as useMemo2 } from \"react\";\n\n// src/button-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\n\n// src/button-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { cloneElement, isValidElement } from \"react\";\nfunction ButtonIcon(props) {\n  const { children, className, ...rest } = props;\n  const _children = isValidElement(children) ? cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n  const _className = cx(\"chakra-button__icon\", className);\n  return /* @__PURE__ */ React.createElement(chakra.span, {\n    display: \"inline-flex\",\n    alignSelf: \"center\",\n    flexShrink: 0,\n    ...rest,\n    className: _className\n  }, _children);\n}\nButtonIcon.displayName = \"ButtonIcon\";\n\n// src/button-spinner.tsx\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nfunction ButtonSpinner(props) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = /* @__PURE__ */ React.createElement(Spinner, {\n      color: \"currentColor\",\n      width: \"1em\",\n      height: \"1em\"\n    }),\n    className,\n    __css,\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__spinner\", className);\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  const spinnerStyles = useMemo(() => ({\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? spacing : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\",\n    ...__css\n  }), [__css, label, marginProp, spacing]);\n  return /* @__PURE__ */ React.createElement(chakra2.div, {\n    className: _className,\n    ...rest,\n    __css: spinnerStyles\n  }, children);\n}\nButtonSpinner.displayName = \"ButtonSpinner\";\n\n// src/use-button-type.tsx\nimport { useCallback, useState } from \"react\";\nfunction useButtonType(value) {\n  const [isButton, setIsButton] = useState(!value);\n  const refCallback = useCallback((node) => {\n    if (!node)\n      return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  const type = isButton ? \"button\" : void 0;\n  return { ref: refCallback, type };\n}\n\n// src/button.tsx\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", { ...group, ...props });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo2(() => {\n    const _focus = { ...styles == null ? void 0 : styles[\"_focus\"], zIndex: 1 };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...!!group && { _focus }\n    };\n  }, [styles, group]);\n  const { ref: _ref, type: defaultType } = useButtonType(as);\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children };\n  return /* @__PURE__ */ React.createElement(chakra3.button, {\n    disabled: isDisabled || isLoading,\n    ref: useMergeRefs(ref, _ref),\n    as,\n    type: type ?? defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className),\n    ...rest\n  }, isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */ React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--start\",\n    label: loadingText,\n    placement: \"start\",\n    spacing: iconSpacing\n  }, spinner), isLoading ? loadingText || /* @__PURE__ */ React.createElement(chakra3.span, {\n    opacity: 0\n  }, /* @__PURE__ */ React.createElement(ButtonContent, {\n    ...contentProps\n  })) : /* @__PURE__ */ React.createElement(ButtonContent, {\n    ...contentProps\n  }), isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */ React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--end\",\n    label: loadingText,\n    placement: \"end\",\n    spacing: iconSpacing\n  }, spinner));\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props;\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, leftIcon && /* @__PURE__ */ React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), children, rightIcon && /* @__PURE__ */ React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n}\n\n// src/button-group.tsx\nimport {\n  chakra as chakra4,\n  forwardRef as forwardRef2\n} from \"@chakra-ui/system\";\nimport { useMemo as useMemo3 } from \"react\";\nvar ButtonGroup = forwardRef2(function ButtonGroup2(props, ref) {\n  const {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled,\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__group\", className);\n  const context = useMemo3(() => ({ size, colorScheme, variant, isDisabled }), [size, colorScheme, variant, isDisabled]);\n  let groupStyles = {\n    display: \"inline-flex\"\n  };\n  if (isAttached) {\n    groupStyles = {\n      ...groupStyles,\n      \"> *:first-of-type:not(:last-of-type)\": { borderEndRadius: 0 },\n      \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n      \"> *:not(:first-of-type):last-of-type\": { borderStartRadius: 0 }\n    };\n  } else {\n    groupStyles = {\n      ...groupStyles,\n      \"& > *:not(style) ~ *:not(style)\": { marginStart: spacing }\n    };\n  }\n  return /* @__PURE__ */ React.createElement(ButtonGroupProvider, {\n    value: context\n  }, /* @__PURE__ */ React.createElement(chakra4.div, {\n    ref,\n    role: \"group\",\n    __css: groupStyles,\n    className: _className,\n    \"data-attached\": isAttached ? \"\" : void 0,\n    ...rest\n  }));\n});\nButtonGroup.displayName = \"ButtonGroup\";\n\n// src/icon-button.tsx\nimport { forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nimport { cloneElement as cloneElement2, isValidElement as isValidElement2 } from \"react\";\nvar IconButton = forwardRef3((props, ref) => {\n  const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props;\n  const element = icon || children;\n  const _children = isValidElement2(element) ? cloneElement2(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n  return /* @__PURE__ */ React.createElement(Button, {\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : void 0,\n    ref,\n    \"aria-label\": ariaLabel,\n    ...rest\n  }, _children);\n});\nIconButton.displayName = \"IconButton\";\nexport {\n  Button,\n  ButtonGroup,\n  ButtonSpinner,\n  IconButton,\n  useButtonGroup\n};\n","// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport {\n  assignRef,\n  mergeRefs,\n  useMergeRefs\n};\n"],"names":["Navigator","to","colorScheme","variant","marginRight","UserMenu","dispatch","useDispatch","user","isLoggedIn","useSelector","selectLogIn","selectUsername","token","selectToken","display","alignItems","textAlign","fontSize","fontWeight","color","name","type","onClick","logOutUser","AppBar","logIn","justifyContent","marginBottom","marginTop","borderBottom","paddingBottom","marginLeft","Layout","Suspense","fallback","PacmanLoader","cssOverride","cx","classNames","filter","Boolean","join","dataAttr","condition","createContext","strict","ButtonGroupProvider","useButtonGroup","ButtonIcon","props","children","className","rest","_children","isValidElement","cloneElement","focusable","_className","React","chakra","alignSelf","flexShrink","ButtonSpinner","label","placement","spacing","Spinner","width","height","__css","marginProp","spinnerStyles","useMemo","position","chakra2","displayName","Button","forwardRef","ref","group","styles","useStyleConfig","omitThemingProps","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","iconSpacing","spinner","spinnerPlacement","as","buttonStyles","useMemo2","_focus","zIndex","appearance","userSelect","whiteSpace","verticalAlign","outline","value","useState","isButton","setIsButton","useCallback","node","tagName","useButtonType","_ref","defaultType","contentProps","chakra3","disabled","useMergeRefs","opacity","ButtonContent","marginEnd","marginStart","forwardRef2","size","isAttached","context","useMemo3","groupStyles","borderEndRadius","borderRadius","borderStartRadius","chakra4","role","forwardRef3","icon","isRound","ariaLabel","element","isValidElement2","cloneElement2","padding","assignRef","current","error","Error","mergeRefs","refs","forEach"],"sourceRoot":""}